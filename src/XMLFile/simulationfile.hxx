// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIMULATIONFILE_HXX
#define SIMULATIONFILE_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class Vec3_t;
class dim3_t;
class List_t;
class conditions_t;
class LinkedCell_t;
class algorithm_t;
class params_t;
class particle_t;
class cuboid_t;
class sphere_t;
class data_t;
class simulationfile_t;
class condition;
class outputfmt;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class Vec3_t: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal >
{
  public:
  Vec3_t ();

  Vec3_t (size_type n, const ::xml_schema::decimal& x);

  template < typename I >
  Vec3_t (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal > (begin, end, this)
  {
  }

  Vec3_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Vec3_t (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Vec3_t (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Vec3_t (const Vec3_t& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Vec3_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Vec3_t ();
};

class dim3_t: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::int_, char >
{
  public:
  dim3_t ();

  dim3_t (size_type n, const ::xml_schema::int_& x);

  template < typename I >
  dim3_t (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::int_, char > (begin, end, this)
  {
  }

  dim3_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  dim3_t (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  dim3_t (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  dim3_t (const dim3_t& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual dim3_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~dim3_t ();
};

class List_t: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  List_t ();

  List_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  List_t (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  List_t (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  List_t (const List_t& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual List_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~List_t ();
};

class conditions_t: public ::xml_schema::type
{
  public:
  // condition
  // 
  typedef ::condition condition_type;
  typedef ::xsd::cxx::tree::sequence< condition_type > condition_sequence;
  typedef condition_sequence::iterator condition_iterator;
  typedef condition_sequence::const_iterator condition_const_iterator;
  typedef ::xsd::cxx::tree::traits< condition_type, char > condition_traits;

  const condition_sequence&
  condition () const;

  condition_sequence&
  condition ();

  void
  condition (const condition_sequence& s);

  // Constructors.
  //
  conditions_t ();

  conditions_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  conditions_t (const conditions_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual conditions_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~conditions_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  condition_sequence condition_;
};

class LinkedCell_t: public ::xml_schema::type
{
  public:
  // sizeofdomainX
  // 
  typedef ::xml_schema::decimal sizeofdomainX_type;
  typedef ::xsd::cxx::tree::traits< sizeofdomainX_type, char, ::xsd::cxx::tree::schema_type::decimal > sizeofdomainX_traits;

  const sizeofdomainX_type&
  sizeofdomainX () const;

  sizeofdomainX_type&
  sizeofdomainX ();

  void
  sizeofdomainX (const sizeofdomainX_type& x);

  // sizeofdomainY
  // 
  typedef ::xml_schema::decimal sizeofdomainY_type;
  typedef ::xsd::cxx::tree::traits< sizeofdomainY_type, char, ::xsd::cxx::tree::schema_type::decimal > sizeofdomainY_traits;

  const sizeofdomainY_type&
  sizeofdomainY () const;

  sizeofdomainY_type&
  sizeofdomainY ();

  void
  sizeofdomainY (const sizeofdomainY_type& x);

  // sizeofdomainZ
  // 
  typedef ::xml_schema::decimal sizeofdomainZ_type;
  typedef ::xsd::cxx::tree::traits< sizeofdomainZ_type, char, ::xsd::cxx::tree::schema_type::decimal > sizeofdomainZ_traits;

  const sizeofdomainZ_type&
  sizeofdomainZ () const;

  sizeofdomainZ_type&
  sizeofdomainZ ();

  void
  sizeofdomainZ (const sizeofdomainZ_type& x);

  // cutoff_radius
  // 
  typedef ::xml_schema::decimal cutoff_radius_type;
  typedef ::xsd::cxx::tree::traits< cutoff_radius_type, char, ::xsd::cxx::tree::schema_type::decimal > cutoff_radius_traits;

  const cutoff_radius_type&
  cutoff_radius () const;

  cutoff_radius_type&
  cutoff_radius ();

  void
  cutoff_radius (const cutoff_radius_type& x);

  // offset
  // 
  typedef ::Vec3_t offset_type;
  typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

  const offset_type&
  offset () const;

  offset_type&
  offset ();

  void
  offset (const offset_type& x);

  void
  offset (::std::auto_ptr< offset_type > p);

  // conditions
  // 
  typedef ::conditions_t conditions_type;
  typedef ::xsd::cxx::tree::optional< conditions_type > conditions_optional;
  typedef ::xsd::cxx::tree::traits< conditions_type, char > conditions_traits;

  const conditions_optional&
  conditions () const;

  conditions_optional&
  conditions ();

  void
  conditions (const conditions_type& x);

  void
  conditions (const conditions_optional& x);

  void
  conditions (::std::auto_ptr< conditions_type > p);

  // Constructors.
  //
  LinkedCell_t (const sizeofdomainX_type&,
                const sizeofdomainY_type&,
                const sizeofdomainZ_type&,
                const cutoff_radius_type&,
                const offset_type&);

  LinkedCell_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  LinkedCell_t (const LinkedCell_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual LinkedCell_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LinkedCell_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< sizeofdomainX_type > sizeofdomainX_;
  ::xsd::cxx::tree::one< sizeofdomainY_type > sizeofdomainY_;
  ::xsd::cxx::tree::one< sizeofdomainZ_type > sizeofdomainZ_;
  ::xsd::cxx::tree::one< cutoff_radius_type > cutoff_radius_;
  ::xsd::cxx::tree::one< offset_type > offset_;
  conditions_optional conditions_;
};

class algorithm_t: public ::xml_schema::type
{
  public:
  // List
  // 
  typedef ::List_t List_type;
  typedef ::xsd::cxx::tree::optional< List_type > List_optional;
  typedef ::xsd::cxx::tree::traits< List_type, char > List_traits;

  const List_optional&
  List () const;

  List_optional&
  List ();

  void
  List (const List_type& x);

  void
  List (const List_optional& x);

  void
  List (::std::auto_ptr< List_type > p);

  // LinkedCell
  // 
  typedef ::LinkedCell_t LinkedCell_type;
  typedef ::xsd::cxx::tree::optional< LinkedCell_type > LinkedCell_optional;
  typedef ::xsd::cxx::tree::traits< LinkedCell_type, char > LinkedCell_traits;

  const LinkedCell_optional&
  LinkedCell () const;

  LinkedCell_optional&
  LinkedCell ();

  void
  LinkedCell (const LinkedCell_type& x);

  void
  LinkedCell (const LinkedCell_optional& x);

  void
  LinkedCell (::std::auto_ptr< LinkedCell_type > p);

  // Constructors.
  //
  algorithm_t ();

  algorithm_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  algorithm_t (const algorithm_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual algorithm_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~algorithm_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  List_optional List_;
  LinkedCell_optional LinkedCell_;
};

class params_t: public ::xml_schema::type
{
  public:
  // output
  // 
  typedef ::xml_schema::string output_type;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_type&
  output () const;

  output_type&
  output ();

  void
  output (const output_type& x);

  void
  output (::std::auto_ptr< output_type > p);

  // iterationsperoutput
  // 
  typedef ::xml_schema::int_ iterationsperoutput_type;
  typedef ::xsd::cxx::tree::traits< iterationsperoutput_type, char > iterationsperoutput_traits;

  const iterationsperoutput_type&
  iterationsperoutput () const;

  iterationsperoutput_type&
  iterationsperoutput ();

  void
  iterationsperoutput (const iterationsperoutput_type& x);

  // delta_t
  // 
  typedef ::xml_schema::decimal delta_t_type;
  typedef ::xsd::cxx::tree::traits< delta_t_type, char, ::xsd::cxx::tree::schema_type::decimal > delta_t_traits;

  const delta_t_type&
  delta_t () const;

  delta_t_type&
  delta_t ();

  void
  delta_t (const delta_t_type& x);

  // t_end
  // 
  typedef ::xml_schema::decimal t_end_type;
  typedef ::xsd::cxx::tree::traits< t_end_type, char, ::xsd::cxx::tree::schema_type::decimal > t_end_traits;

  const t_end_type&
  t_end () const;

  t_end_type&
  t_end ();

  void
  t_end (const t_end_type& x);

  // epsilon
  // 
  typedef ::xml_schema::decimal epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::decimal > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  // sigma
  // 
  typedef ::xml_schema::decimal sigma_type;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::decimal > sigma_traits;

  const sigma_type&
  sigma () const;

  sigma_type&
  sigma ();

  void
  sigma (const sigma_type& x);

  // brownianMotionFactor
  // 
  typedef ::xml_schema::decimal brownianMotionFactor_type;
  typedef ::xsd::cxx::tree::traits< brownianMotionFactor_type, char, ::xsd::cxx::tree::schema_type::decimal > brownianMotionFactor_traits;

  const brownianMotionFactor_type&
  brownianMotionFactor () const;

  brownianMotionFactor_type&
  brownianMotionFactor ();

  void
  brownianMotionFactor (const brownianMotionFactor_type& x);

  // t_start
  // 
  typedef ::xml_schema::decimal t_start_type;
  typedef ::xsd::cxx::tree::traits< t_start_type, char, ::xsd::cxx::tree::schema_type::decimal > t_start_traits;

  const t_start_type&
  t_start () const;

  t_start_type&
  t_start ();

  void
  t_start (const t_start_type& x);

  // outputfmt
  // 
  typedef ::outputfmt outputfmt_type;
  typedef ::xsd::cxx::tree::traits< outputfmt_type, char > outputfmt_traits;

  const outputfmt_type&
  outputfmt () const;

  outputfmt_type&
  outputfmt ();

  void
  outputfmt (const outputfmt_type& x);

  void
  outputfmt (::std::auto_ptr< outputfmt_type > p);

  // algorithm
  // 
  typedef ::algorithm_t algorithm_type;
  typedef ::xsd::cxx::tree::traits< algorithm_type, char > algorithm_traits;

  const algorithm_type&
  algorithm () const;

  algorithm_type&
  algorithm ();

  void
  algorithm (const algorithm_type& x);

  void
  algorithm (::std::auto_ptr< algorithm_type > p);

  // Constructors.
  //
  params_t (const output_type&,
            const iterationsperoutput_type&,
            const delta_t_type&,
            const t_end_type&,
            const epsilon_type&,
            const sigma_type&,
            const brownianMotionFactor_type&,
            const t_start_type&,
            const outputfmt_type&,
            const algorithm_type&);

  params_t (const output_type&,
            const iterationsperoutput_type&,
            const delta_t_type&,
            const t_end_type&,
            const epsilon_type&,
            const sigma_type&,
            const brownianMotionFactor_type&,
            const t_start_type&,
            const outputfmt_type&,
            ::std::auto_ptr< algorithm_type >&);

  params_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  params_t (const params_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual params_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~params_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< output_type > output_;
  ::xsd::cxx::tree::one< iterationsperoutput_type > iterationsperoutput_;
  ::xsd::cxx::tree::one< delta_t_type > delta_t_;
  ::xsd::cxx::tree::one< t_end_type > t_end_;
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  ::xsd::cxx::tree::one< sigma_type > sigma_;
  ::xsd::cxx::tree::one< brownianMotionFactor_type > brownianMotionFactor_;
  ::xsd::cxx::tree::one< t_start_type > t_start_;
  ::xsd::cxx::tree::one< outputfmt_type > outputfmt_;
  ::xsd::cxx::tree::one< algorithm_type > algorithm_;
};

class particle_t: public ::xml_schema::type
{
  public:
  // X
  // 
  typedef ::Vec3_t X_type;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_type&
  X () const;

  X_type&
  X ();

  void
  X (const X_type& x);

  void
  X (::std::auto_ptr< X_type > p);

  // V
  // 
  typedef ::Vec3_t V_type;
  typedef ::xsd::cxx::tree::traits< V_type, char > V_traits;

  const V_type&
  V () const;

  V_type&
  V ();

  void
  V (const V_type& x);

  void
  V (::std::auto_ptr< V_type > p);

  // m
  // 
  typedef ::xml_schema::decimal m_type;
  typedef ::xsd::cxx::tree::traits< m_type, char, ::xsd::cxx::tree::schema_type::decimal > m_traits;

  const m_type&
  m () const;

  m_type&
  m ();

  void
  m (const m_type& x);

  // Constructors.
  //
  particle_t (const X_type&,
              const V_type&,
              const m_type&);

  particle_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  particle_t (const particle_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual particle_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~particle_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< X_type > X_;
  ::xsd::cxx::tree::one< V_type > V_;
  ::xsd::cxx::tree::one< m_type > m_;
};

class cuboid_t: public ::xml_schema::type
{
  public:
  // X
  // 
  typedef ::Vec3_t X_type;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_type&
  X () const;

  X_type&
  X ();

  void
  X (const X_type& x);

  void
  X (::std::auto_ptr< X_type > p);

  // V
  // 
  typedef ::Vec3_t V_type;
  typedef ::xsd::cxx::tree::traits< V_type, char > V_traits;

  const V_type&
  V () const;

  V_type&
  V ();

  void
  V (const V_type& x);

  void
  V (::std::auto_ptr< V_type > p);

  // N
  // 
  typedef ::dim3_t N_type;
  typedef ::xsd::cxx::tree::traits< N_type, char > N_traits;

  const N_type&
  N () const;

  N_type&
  N ();

  void
  N (const N_type& x);

  void
  N (::std::auto_ptr< N_type > p);

  // h
  // 
  typedef ::xml_schema::decimal h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char, ::xsd::cxx::tree::schema_type::decimal > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  // m
  // 
  typedef ::xml_schema::decimal m_type;
  typedef ::xsd::cxx::tree::traits< m_type, char, ::xsd::cxx::tree::schema_type::decimal > m_traits;

  const m_type&
  m () const;

  m_type&
  m ();

  void
  m (const m_type& x);

  // Constructors.
  //
  cuboid_t (const X_type&,
            const V_type&,
            const N_type&,
            const h_type&,
            const m_type&);

  cuboid_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  cuboid_t (const cuboid_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual cuboid_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cuboid_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< X_type > X_;
  ::xsd::cxx::tree::one< V_type > V_;
  ::xsd::cxx::tree::one< N_type > N_;
  ::xsd::cxx::tree::one< h_type > h_;
  ::xsd::cxx::tree::one< m_type > m_;
};

class sphere_t: public ::xml_schema::type
{
  public:
  // X
  // 
  typedef ::Vec3_t X_type;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_type&
  X () const;

  X_type&
  X ();

  void
  X (const X_type& x);

  void
  X (::std::auto_ptr< X_type > p);

  // V
  // 
  typedef ::Vec3_t V_type;
  typedef ::xsd::cxx::tree::traits< V_type, char > V_traits;

  const V_type&
  V () const;

  V_type&
  V ();

  void
  V (const V_type& x);

  void
  V (::std::auto_ptr< V_type > p);

  // r
  // 
  typedef ::xml_schema::decimal r_type;
  typedef ::xsd::cxx::tree::traits< r_type, char, ::xsd::cxx::tree::schema_type::decimal > r_traits;

  const r_type&
  r () const;

  r_type&
  r ();

  void
  r (const r_type& x);

  // h
  // 
  typedef ::xml_schema::decimal h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char, ::xsd::cxx::tree::schema_type::decimal > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  // m
  // 
  typedef ::xml_schema::decimal m_type;
  typedef ::xsd::cxx::tree::traits< m_type, char, ::xsd::cxx::tree::schema_type::decimal > m_traits;

  const m_type&
  m () const;

  m_type&
  m ();

  void
  m (const m_type& x);

  // dimensions
  // 
  typedef ::xml_schema::integer dimensions_type;
  typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

  const dimensions_type&
  dimensions () const;

  dimensions_type&
  dimensions ();

  void
  dimensions (const dimensions_type& x);

  // Constructors.
  //
  sphere_t (const X_type&,
            const V_type&,
            const r_type&,
            const h_type&,
            const m_type&,
            const dimensions_type&);

  sphere_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  sphere_t (const sphere_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual sphere_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~sphere_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< X_type > X_;
  ::xsd::cxx::tree::one< V_type > V_;
  ::xsd::cxx::tree::one< r_type > r_;
  ::xsd::cxx::tree::one< h_type > h_;
  ::xsd::cxx::tree::one< m_type > m_;
  ::xsd::cxx::tree::one< dimensions_type > dimensions_;
};

class data_t: public ::xml_schema::type
{
  public:
  // particle
  // 
  typedef ::particle_t particle_type;
  typedef ::xsd::cxx::tree::sequence< particle_type > particle_sequence;
  typedef particle_sequence::iterator particle_iterator;
  typedef particle_sequence::const_iterator particle_const_iterator;
  typedef ::xsd::cxx::tree::traits< particle_type, char > particle_traits;

  const particle_sequence&
  particle () const;

  particle_sequence&
  particle ();

  void
  particle (const particle_sequence& s);

  // inputfile
  // 
  typedef ::xml_schema::string inputfile_type;
  typedef ::xsd::cxx::tree::sequence< inputfile_type > inputfile_sequence;
  typedef inputfile_sequence::iterator inputfile_iterator;
  typedef inputfile_sequence::const_iterator inputfile_const_iterator;
  typedef ::xsd::cxx::tree::traits< inputfile_type, char > inputfile_traits;

  const inputfile_sequence&
  inputfile () const;

  inputfile_sequence&
  inputfile ();

  void
  inputfile (const inputfile_sequence& s);

  // cuboid
  // 
  typedef ::cuboid_t cuboid_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

  const cuboid_sequence&
  cuboid () const;

  cuboid_sequence&
  cuboid ();

  void
  cuboid (const cuboid_sequence& s);

  // sphere
  // 
  typedef ::sphere_t sphere_type;
  typedef ::xsd::cxx::tree::sequence< sphere_type > sphere_sequence;
  typedef sphere_sequence::iterator sphere_iterator;
  typedef sphere_sequence::const_iterator sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

  const sphere_sequence&
  sphere () const;

  sphere_sequence&
  sphere ();

  void
  sphere (const sphere_sequence& s);

  // Constructors.
  //
  data_t ();

  data_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  data_t (const data_t& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual data_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~data_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  particle_sequence particle_;
  inputfile_sequence inputfile_;
  cuboid_sequence cuboid_;
  sphere_sequence sphere_;
};

class simulationfile_t: public ::xml_schema::type
{
  public:
  // params
  // 
  typedef ::params_t params_type;
  typedef ::xsd::cxx::tree::traits< params_type, char > params_traits;

  const params_type&
  params () const;

  params_type&
  params ();

  void
  params (const params_type& x);

  void
  params (::std::auto_ptr< params_type > p);

  // data
  // 
  typedef ::data_t data_type;
  typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

  const data_type&
  data () const;

  data_type&
  data ();

  void
  data (const data_type& x);

  void
  data (::std::auto_ptr< data_type > p);

  // Constructors.
  //
  simulationfile_t (const params_type&,
                    const data_type&);

  simulationfile_t (::std::auto_ptr< params_type >&,
                    ::std::auto_ptr< data_type >&);

  simulationfile_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  simulationfile_t (const simulationfile_t& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual simulationfile_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~simulationfile_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< params_type > params_;
  ::xsd::cxx::tree::one< data_type > data_;
};

class condition: public ::xml_schema::string
{
  public:
  // value
  // 
  typedef ::xml_schema::string value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  condition ();

  condition (const char*);

  condition (const ::std::string&);

  condition (const ::xml_schema::string&);

  condition (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  condition (const condition& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual condition*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~condition ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class outputfmt: public ::xml_schema::string
{
  public:
  enum value
  {
    None,
    VTK,
    XYZ
  };

  outputfmt (value v);

  outputfmt (const char* v);

  outputfmt (const ::std::string& v);

  outputfmt (const ::xml_schema::string& v);

  outputfmt (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  outputfmt (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  outputfmt (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  outputfmt (const outputfmt& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual outputfmt*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  outputfmt&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_outputfmt_convert ();
  }

  protected:
  value
  _xsd_outputfmt_convert () const;

  public:
  static const char* const _xsd_outputfmt_literals_[3];
  static const value _xsd_outputfmt_indexes_[3];
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::simulationfile_t >
simulationfile (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::simulationfile_t >
simulationfile (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::simulationfile_t >
simulationfile (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::simulationfile_t >
simulationfile (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationfile_t >
simulationfile (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIMULATIONFILE_HXX
