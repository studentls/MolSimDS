// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SRC_OUTPUT_WRITER_VTK_UNSTRUCTURED_IXX
#define SRC_OUTPUT_WRITER_VTK_UNSTRUCTURED_IXX

// Begin prologue.
//
//
// End prologue.

// DataArrayList_t
//

inline
DataArrayList_t::
DataArrayList_t ()
: ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal > ( ::xml_schema::flags (0), this)
{
}

inline
DataArrayList_t::
DataArrayList_t (size_type n, const ::xml_schema::decimal& x)
: ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal > (n, x, this)
{
}

inline
DataArrayList_t::
DataArrayList_t (const DataArrayList_t& o,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::decimal, char, ::xsd::cxx::tree::schema_type::decimal > (o, f, this)
{
}

// DataArray_t
// 

inline
const DataArray_t::type_type& DataArray_t::
type () const
{
  return this->type_.get ();
}

inline
DataArray_t::type_type& DataArray_t::
type ()
{
  return this->type_.get ();
}

inline
void DataArray_t::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void DataArray_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const DataArray_t::Name_type& DataArray_t::
Name () const
{
  return this->Name_.get ();
}

inline
DataArray_t::Name_type& DataArray_t::
Name ()
{
  return this->Name_.get ();
}

inline
void DataArray_t::
Name (const Name_type& x)
{
  this->Name_.set (x);
}

inline
void DataArray_t::
Name (::std::auto_ptr< Name_type > x)
{
  this->Name_.set (x);
}

inline
const DataArray_t::NumberOfComponents_type& DataArray_t::
NumberOfComponents () const
{
  return this->NumberOfComponents_.get ();
}

inline
DataArray_t::NumberOfComponents_type& DataArray_t::
NumberOfComponents ()
{
  return this->NumberOfComponents_.get ();
}

inline
void DataArray_t::
NumberOfComponents (const NumberOfComponents_type& x)
{
  this->NumberOfComponents_.set (x);
}

inline
const DataArray_t::format_type& DataArray_t::
format () const
{
  return this->format_.get ();
}

inline
const DataArray_t::format_type& DataArray_t::
format_default_value ()
{
  return format_default_value_;
}

inline
const DataArray_t::offset_optional& DataArray_t::
offset () const
{
  return this->offset_;
}

inline
DataArray_t::offset_optional& DataArray_t::
offset ()
{
  return this->offset_;
}

inline
void DataArray_t::
offset (const offset_type& x)
{
  this->offset_.set (x);
}

inline
void DataArray_t::
offset (const offset_optional& x)
{
  this->offset_ = x;
}


// PieceUnstructuredGrid_t
// 

inline
const PieceUnstructuredGrid_t::PointData_type& PieceUnstructuredGrid_t::
PointData () const
{
  return this->PointData_.get ();
}

inline
PieceUnstructuredGrid_t::PointData_type& PieceUnstructuredGrid_t::
PointData ()
{
  return this->PointData_.get ();
}

inline
void PieceUnstructuredGrid_t::
PointData (const PointData_type& x)
{
  this->PointData_.set (x);
}

inline
void PieceUnstructuredGrid_t::
PointData (::std::auto_ptr< PointData_type > x)
{
  this->PointData_.set (x);
}

inline
const PieceUnstructuredGrid_t::CellData_type& PieceUnstructuredGrid_t::
CellData () const
{
  return this->CellData_.get ();
}

inline
PieceUnstructuredGrid_t::CellData_type& PieceUnstructuredGrid_t::
CellData ()
{
  return this->CellData_.get ();
}

inline
void PieceUnstructuredGrid_t::
CellData (const CellData_type& x)
{
  this->CellData_.set (x);
}

inline
void PieceUnstructuredGrid_t::
CellData (::std::auto_ptr< CellData_type > x)
{
  this->CellData_.set (x);
}

inline
const PieceUnstructuredGrid_t::Points_type& PieceUnstructuredGrid_t::
Points () const
{
  return this->Points_.get ();
}

inline
PieceUnstructuredGrid_t::Points_type& PieceUnstructuredGrid_t::
Points ()
{
  return this->Points_.get ();
}

inline
void PieceUnstructuredGrid_t::
Points (const Points_type& x)
{
  this->Points_.set (x);
}

inline
void PieceUnstructuredGrid_t::
Points (::std::auto_ptr< Points_type > x)
{
  this->Points_.set (x);
}

inline
const PieceUnstructuredGrid_t::Cells_type& PieceUnstructuredGrid_t::
Cells () const
{
  return this->Cells_.get ();
}

inline
PieceUnstructuredGrid_t::Cells_type& PieceUnstructuredGrid_t::
Cells ()
{
  return this->Cells_.get ();
}

inline
void PieceUnstructuredGrid_t::
Cells (const Cells_type& x)
{
  this->Cells_.set (x);
}

inline
void PieceUnstructuredGrid_t::
Cells (::std::auto_ptr< Cells_type > x)
{
  this->Cells_.set (x);
}

inline
const PieceUnstructuredGrid_t::NumberOfPoints_type& PieceUnstructuredGrid_t::
NumberOfPoints () const
{
  return this->NumberOfPoints_.get ();
}

inline
PieceUnstructuredGrid_t::NumberOfPoints_type& PieceUnstructuredGrid_t::
NumberOfPoints ()
{
  return this->NumberOfPoints_.get ();
}

inline
void PieceUnstructuredGrid_t::
NumberOfPoints (const NumberOfPoints_type& x)
{
  this->NumberOfPoints_.set (x);
}

inline
const PieceUnstructuredGrid_t::NumberOfCells_type& PieceUnstructuredGrid_t::
NumberOfCells () const
{
  return this->NumberOfCells_.get ();
}

inline
PieceUnstructuredGrid_t::NumberOfCells_type& PieceUnstructuredGrid_t::
NumberOfCells ()
{
  return this->NumberOfCells_.get ();
}

inline
void PieceUnstructuredGrid_t::
NumberOfCells (const NumberOfCells_type& x)
{
  this->NumberOfCells_.set (x);
}


// UnstructuredGrid_t
// 

inline
const UnstructuredGrid_t::Piece_type& UnstructuredGrid_t::
Piece () const
{
  return this->Piece_.get ();
}

inline
UnstructuredGrid_t::Piece_type& UnstructuredGrid_t::
Piece ()
{
  return this->Piece_.get ();
}

inline
void UnstructuredGrid_t::
Piece (const Piece_type& x)
{
  this->Piece_.set (x);
}

inline
void UnstructuredGrid_t::
Piece (::std::auto_ptr< Piece_type > x)
{
  this->Piece_.set (x);
}


// PolyData_t
// 

inline
const PolyData_t::greeting_type& PolyData_t::
greeting () const
{
  return this->greeting_.get ();
}

inline
PolyData_t::greeting_type& PolyData_t::
greeting ()
{
  return this->greeting_.get ();
}

inline
void PolyData_t::
greeting (const greeting_type& x)
{
  this->greeting_.set (x);
}

inline
void PolyData_t::
greeting (::std::auto_ptr< greeting_type > x)
{
  this->greeting_.set (x);
}


// VTKFile_t
// 

inline
const VTKFile_t::UnstructuredGrid_optional& VTKFile_t::
UnstructuredGrid () const
{
  return this->UnstructuredGrid_;
}

inline
VTKFile_t::UnstructuredGrid_optional& VTKFile_t::
UnstructuredGrid ()
{
  return this->UnstructuredGrid_;
}

inline
void VTKFile_t::
UnstructuredGrid (const UnstructuredGrid_type& x)
{
  this->UnstructuredGrid_.set (x);
}

inline
void VTKFile_t::
UnstructuredGrid (const UnstructuredGrid_optional& x)
{
  this->UnstructuredGrid_ = x;
}

inline
void VTKFile_t::
UnstructuredGrid (::std::auto_ptr< UnstructuredGrid_type > x)
{
  this->UnstructuredGrid_.set (x);
}

inline
const VTKFile_t::PolyData_optional& VTKFile_t::
PolyData () const
{
  return this->PolyData_;
}

inline
VTKFile_t::PolyData_optional& VTKFile_t::
PolyData ()
{
  return this->PolyData_;
}

inline
void VTKFile_t::
PolyData (const PolyData_type& x)
{
  this->PolyData_.set (x);
}

inline
void VTKFile_t::
PolyData (const PolyData_optional& x)
{
  this->PolyData_ = x;
}

inline
void VTKFile_t::
PolyData (::std::auto_ptr< PolyData_type > x)
{
  this->PolyData_.set (x);
}

inline
const VTKFile_t::type_type& VTKFile_t::
type () const
{
  return this->type_.get ();
}

inline
VTKFile_t::type_type& VTKFile_t::
type ()
{
  return this->type_.get ();
}

inline
void VTKFile_t::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void VTKFile_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const VTKFile_t::version_type& VTKFile_t::
version () const
{
  return this->version_.get ();
}

inline
const VTKFile_t::version_type& VTKFile_t::
version_default_value ()
{
  return version_default_value_;
}

inline
const VTKFile_t::byte_order_type& VTKFile_t::
byte_order () const
{
  return this->byte_order_.get ();
}

inline
const VTKFile_t::byte_order_type& VTKFile_t::
byte_order_default_value ()
{
  return byte_order_default_value_;
}


// type
// 

inline
type::
type (value v)
: ::xml_schema::string (_xsd_type_literals_[v])
{
}

inline
type::
type (const char* v)
: ::xml_schema::string (v)
{
}

inline
type::
type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
type::
type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
type::
type (const type& v,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
type& type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_type_literals_[v]);

  return *this;
}


// PointData
// 

inline
const PointData::DataArray_sequence& PointData::
DataArray () const
{
  return this->DataArray_;
}

inline
PointData::DataArray_sequence& PointData::
DataArray ()
{
  return this->DataArray_;
}

inline
void PointData::
DataArray (const DataArray_sequence& s)
{
  this->DataArray_ = s;
}


// CellData
// 

inline
const CellData::DataArray_sequence& CellData::
DataArray () const
{
  return this->DataArray_;
}

inline
CellData::DataArray_sequence& CellData::
DataArray ()
{
  return this->DataArray_;
}

inline
void CellData::
DataArray (const DataArray_sequence& s)
{
  this->DataArray_ = s;
}


// Points
// 

inline
const Points::DataArray_sequence& Points::
DataArray () const
{
  return this->DataArray_;
}

inline
Points::DataArray_sequence& Points::
DataArray ()
{
  return this->DataArray_;
}

inline
void Points::
DataArray (const DataArray_sequence& s)
{
  this->DataArray_ = s;
}


// Cells
// 

inline
const Cells::DataArray_sequence& Cells::
DataArray () const
{
  return this->DataArray_;
}

inline
Cells::DataArray_sequence& Cells::
DataArray ()
{
  return this->DataArray_;
}

inline
void Cells::
DataArray (const DataArray_sequence& s)
{
  this->DataArray_ = s;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // SRC_OUTPUT_WRITER_VTK_UNSTRUCTURED_IXX
